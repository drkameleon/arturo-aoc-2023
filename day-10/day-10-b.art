data: flatten sz: size first <= map read.lines ./"input.txt" => split
command: #[
    "S": @[1, sz], "F": @[1, sz], "|": @[neg sz, sz], "L": @[neg sz, 1]
    "-": @[neg 1, 1], "J": @[neg 1, neg sz], "7": @[neg 1, sz]
]
start: index data "S"
points: @[start]
loop command\[data\[start]] 'initial [
    [next,times]: @[start + dir: <= initial, 0]
    'points ++ next
    while [next <> start] ->
        'points ++ next: <= next + dir: <= first select command\[data\[next]] 'x -> not? zero? x+dir
]

print enumerate (@0..dec size data) -- points 'np ->
    and? -> (e: <= dec np) >= (s: <= sz * np/sz)
         -> odd? enumerate s..e 'x ->
                and? -> contains? ["S" "|" "L" "J"] data\[x]
                     -> contains? points x